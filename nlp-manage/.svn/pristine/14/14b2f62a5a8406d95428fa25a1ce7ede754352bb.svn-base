package com.ultra.nlp.manage.controller;

import com.ultra.nlp.manage.model.*;
import com.ultra.nlp.manage.service.DataSetService;
import com.ultra.nlp.manage.service.IServiceService;
import com.ultra.nlp.manage.util.ExcelUtil;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.*;

@Controller
@RequestMapping(value="/classify")
public class ServiceController {

    private final static Logger logger = LoggerFactory.getLogger(ServiceController.class);

    @Autowired
    DataSetService dataSetService;

    @Autowired
    IServiceService serviceService;
    /**
     * 查看分类列表
     * 不传id，则查看全部，传id则查看其子级服务列表
     * @param request
     * @param response
     * @param id
     * @return
     */
    @RequestMapping(method = {RequestMethod.OPTIONS,RequestMethod.POST,RequestMethod.GET},value = "/typeList")
    @ResponseBody
    public Object getClassifyList(HttpServletRequest request, HttpServletResponse response,
                                 @RequestParam(value = "id",required=false) Integer id,
                                 @RequestParam(value = "pageNow",required=false) Integer pageNow,
                                 @RequestParam(value = "pageSize",required=false) Integer pageSize
    ){
        Map map = new HashMap<String,Object>();
        Page page = new Page();
        if (null != id){
            map = new HashMap<String,String>();
            map.put("id",id);
        }
        if(pageNow != null && pageSize != null){
            page.setPageNow(pageNow);
            page.setPageSize(pageSize);
            map.put("queryStart",page.getQueryStart());
            map.put("pageSize",page.getPageSize());
        }else{
            page.setPageNow(1);
            page.setPageSize(0);
        }
        page.setParam(map);
        try{
            logger.info("传入参数id为：" + id + ",pageNow为：" + pageNow + ",pageSize为：" + pageSize);
            page = serviceService.getClassifyList(page);
            JsonModel json = new JsonModel(true,ReturnCode.SUCESS_CODE_0000.getValue(),ReturnCode.SUCESS_CODE_0000.getKey(),page.getResultList());
            json.setPageSize(pageSize);
            json.setPageCount(page.getPageCount());
            json.setTotal(page.getRowCount());
            response.setHeader("Access-Control-Allow-Origin", "*");
            return json;
        }catch (Exception e){
            logger.error(e.getMessage(),e);
            JsonModel json = new JsonModel(true,ReturnCode.ERROR_CODE_11001.getValue(),ReturnCode.ERROR_CODE_11001.getKey(),null);
            return json;
        }

    }

    /**
     * 添加分类
     * @param request
     * @param response
     * @param name
     * @param descr
     * @param icon
     * @param rec_num
     * @param img
     * @param leaf
     * @param p_id
     * @param ser_type
     * @return
     */
    @RequestMapping(method = {RequestMethod.OPTIONS,RequestMethod.POST, RequestMethod.GET},value = "/typeAdd")
    @ResponseBody
    public Object addClassify(HttpServletRequest request, HttpServletResponse response,
                             @RequestParam(value = "name",required=false) String name,
                             @RequestParam(value = "descr",required=false) String descr,
                             @RequestParam(value = "icon",required=false) String icon,
                             @RequestParam(value = "rec_num",required=false) String rec_num,
                             @RequestParam(value = "img",required=false) String img,
                             @RequestParam(value = "leaf",required=false) String leaf,
                             @RequestParam(value = "p_id",required=false) String p_id,
                             @RequestParam(value = "ser_type",required=false) String ser_type
    ) {
        response.setHeader("Access-Control-Allow-Origin", "*");
        Classify classify = new Classify();
        classify.setName(name);
        classify.setDescr(descr);
        //classify.setIcon(icon);
        if(null != rec_num && ! "".equals(rec_num)){
            classify.setRec_num(new BigDecimal(Double.parseDouble(rec_num)));
        }
        classify.setImg(img);
        if(null != leaf && ! "".equals(leaf)){
            classify.setLeaf(Integer.parseInt(leaf));
        }
        classify.setP_id(p_id);
        if(null != ser_type && ! "".equals(ser_type)){
            classify.setSer_type(Integer.parseInt(ser_type));
        }
        classify.setExt1("01");
        try{
            serviceService.addClassify(classify);
            JsonModel json = new JsonModel(true,ReturnCode.SUCESS_CODE_0000.getValue(),ReturnCode.SUCESS_CODE_0000.getKey(),null);
            return json;
        }catch(Exception e){
            logger.error(e.getMessage(),e);
            JsonModel json = new JsonModel(true,ReturnCode.ERROR_CODE_11001.getValue(),ReturnCode.ERROR_CODE_11001.getKey(),null);
            return json;
        }
    }

    /**
     * 修改分类
     * @param request
     * @param response
     * @param classify
     * @return
     */
    @RequestMapping("/typeUpdate")
    @ResponseBody
    public Object updateClassify(HttpServletRequest request, HttpServletResponse response,@ModelAttribute Classify classify){
        response.setHeader("Access-Control-Allow-Origin", "*");
        try{
            serviceService.updateClassify( classify);
            JsonModel json = new JsonModel(true,ReturnCode.SUCESS_CODE_0000.getValue(),ReturnCode.SUCESS_CODE_0000.getKey(),null);
            return json;
        }catch(Exception e){
            logger.error(e.getMessage(),e);
            JsonModel json = new JsonModel(true,ReturnCode.ERROR_CODE_11001.getValue(),ReturnCode.ERROR_CODE_11001.getKey(),null);
            return json;
        }
    }

    /**
     * 删除分类（逻辑删）
     * ext1 设置为状态字段：01 启用 00 删除
     * @param request
     * @param response
     * @param id
     * @return
     */
    @RequestMapping(method = {RequestMethod.OPTIONS,RequestMethod.POST,RequestMethod.GET},value = "/typeDel")
    @ResponseBody
    public Object delClassify(HttpServletRequest request, HttpServletResponse response,
                             @RequestParam(value = "id",required=true) String id){
        response.setHeader("Access-Control-Allow-Origin", "*");
        try{
            serviceService.delClassify(Integer.parseInt(id));
            JsonModel json = new JsonModel(true,ReturnCode.SUCESS_CODE_0000.getValue(),ReturnCode.SUCESS_CODE_0000.getKey(),null);
            return json;
        }catch(Exception e){
            logger.error(e.getMessage(),e);
            JsonModel json = new JsonModel(true,ReturnCode.ERROR_CODE_11001.getValue(),ReturnCode.ERROR_CODE_11001.getKey(),null);
            return json;
        }

    }

    /**
     * 获取最下层分类下的具体服务列表
     * 返回前台结果为map类型
     * @param request
     * @param response
     * @param id
     * @param keyword
     * @param pageNow
     * @param pageSize
     * @return
     */
    @RequestMapping(method = {RequestMethod.OPTIONS,RequestMethod.POST,RequestMethod.GET},value = "/serviceList")
    @ResponseBody
    public Object getServiceList(HttpServletRequest request, HttpServletResponse response,
                                 @RequestParam(value = "id") Integer id,
                                 @RequestParam(value = "keyword",required = false)String keyword,
                                 @RequestParam(value = "pageNow",required=false) Integer pageNow,
                                 @RequestParam(value = "pageSize",required=false) Integer pageSize
    ){
        Map map = new HashMap<String,Object>();
        Page page = new Page();
        map.put("keyword",keyword);
        if (null != id){
            map.put("id",id);
        }
        if(pageNow != null && pageSize != null){
            page.setPageNow(pageNow);
            page.setPageSize(pageSize);
            map.put("queryStart",page.getQueryStart());
            map.put("pageSize",page.getPageSize());
        }else{
            page.setPageNow(1);
            page.setPageSize(0);
        }
        page.setParam(map);
        try{
            logger.info("传入参数id为：" + id + "keyword为：" +  keyword + ",pageNow为：" + pageNow + ",pageSize为：" + pageSize);
            page = serviceService.getServiceList(page);
            JsonModel json = new JsonModel(true,ReturnCode.SUCESS_CODE_0000.getValue(),ReturnCode.SUCESS_CODE_0000.getKey(),page.getResultMap());
            json.setPageSize(pageSize);
            json.setPageCount(page.getPageCount());
            json.setTotal(page.getRowCount());
            response.setHeader("Access-Control-Allow-Origin", "*");
            return json;
        }catch (Exception e){
            logger.error(e.getMessage(),e);
            JsonModel json = new JsonModel(true,ReturnCode.ERROR_CODE_11001.getValue(),ReturnCode.ERROR_CODE_11001.getKey(),null);
            return json;
        }

    }

    /**
     * 修改服务
     * @param request
     * @param response
     * @param nlpServiceManage
     * @return
     */
    @CrossOrigin
    @RequestMapping(method = {RequestMethod.OPTIONS,RequestMethod.POST,RequestMethod.GET},
            value = "/updateService")
    @ResponseBody
    public Object updateService(HttpServletRequest request, HttpServletResponse response,
                             @RequestBody NlpServiceManage nlpServiceManage){
        try{
            logger.info("传入参数为："+ nlpServiceManage.toString());
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Date date = new Date();
            nlpServiceManage.setUpdateTime(sdf.format(date));
            int n  =serviceService.updateServiceManage(nlpServiceManage);
            if(n > 0) {
                JsonModel json = new JsonModel(true, ReturnCode.SUCESS_CODE_0000.getValue(), ReturnCode.SUCESS_CODE_0000.getKey(), nlpServiceManage);
                return json;
            }else {
                JsonModel json = new JsonModel(true, "修改服务失败！", ReturnCode.ERROR_CODE_11001.getKey(), nlpServiceManage);
                return json;
            }
        }catch (Exception e){
            logger.error(e.getMessage(),e);
            JsonModel json = new JsonModel(false,ReturnCode.ERROR_CODE_11001.getValue(),ReturnCode.ERROR_CODE_11001.getKey(),null);
            return json;
        }
    }


    /**
     * 添加服务 接口
     * 1、场景：用于管理平台维护服务信息
     * 2、传入参数：
     * @param nlpServiceManage 服务信息和服务相关信息
     * 3、逻辑：保存服务主信息和服务相关信息
     * 4、结果：返回保存成功/失败信息
     * @param request
     * @param response
     * @return
     */
    @CrossOrigin
    @RequestMapping(method = {RequestMethod.OPTIONS,RequestMethod.POST,RequestMethod.GET},
            value = "/addService")
    @ResponseBody
    public Object addService(HttpServletRequest request, HttpServletResponse response,
                             @RequestBody NlpServiceManage nlpServiceManage){
        try{
            logger.info("传入参数为："+ nlpServiceManage.toString());
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Date date = new Date();
            nlpServiceManage.setCreateTime(sdf.format(date));
            nlpServiceManage.setUse_num(0);
            nlpServiceManage.setAccessTime(sdf.format(date));
            int n  =serviceService.addServiceManage(nlpServiceManage);
            if(n > 0) {
                JsonModel json = new JsonModel(true, ReturnCode.SUCESS_CODE_0000.getValue(), ReturnCode.SUCESS_CODE_0000.getKey(), nlpServiceManage);
                return json;
            }else {
                JsonModel json = new JsonModel(true, "新增服务失败！", ReturnCode.ERROR_CODE_11001.getKey(), nlpServiceManage);
                return json;
            }
        }catch (Exception e){
            logger.error(e.getMessage(),e);
            JsonModel json = new JsonModel(false,ReturnCode.ERROR_CODE_11001.getValue(),ReturnCode.ERROR_CODE_11001.getKey(),null);
            return json;
        }
    }

    /**
     * 逻辑删除服务，只把数据库中的状态更改，不做物理删除
     * @param request
     * @param response
     * @param id
     * @return
     */
    @RequestMapping(method = {RequestMethod.OPTIONS,RequestMethod.POST,RequestMethod.GET},value = "/delService")
    @ResponseBody
    public Object delService(HttpServletRequest request, HttpServletResponse response,
                              @RequestParam(value = "id",required=true) String id){
        response.setHeader("Access-Control-Allow-Origin", "*");
        try{
            int i = serviceService.delService(Integer.parseInt(id));
            if (i > 0){
                JsonModel json = new JsonModel(true,ReturnCode.SUCESS_CODE_0000.getValue(),ReturnCode.SUCESS_CODE_0000.getKey(),null);
                return json;
            } else {
                JsonModel json = new JsonModel(true,"修改服务失败",ReturnCode.ERROR_CODE_11001.getKey(),null);
                return json;
            }
        }catch(Exception e){
            logger.error(e.getMessage(),e);
            JsonModel json = new JsonModel(true,ReturnCode.ERROR_CODE_11001.getValue(),ReturnCode.ERROR_CODE_11001.getKey(),null);
            return json;
        }

    }

    /**
     * 功能描述: 查询服务详情接口-用于管理后台编辑服务信息前展示
     *根据服务id查询服务详情，包括服务主表信息和相关表信息
     * last modified by JIT on 2018年5月9日10:02:58
     * @param: id 服务id
     * @return:
     * @auther: guyuefei
     * @date:
     */
    @CrossOrigin
    @RequestMapping(method = {RequestMethod.OPTIONS,RequestMethod.POST,RequestMethod.GET},
            value = "/serviceDetail")
    @ResponseBody
    public Object serviceDetail(HttpServletRequest request, HttpServletResponse response,
                                @RequestParam (value = "serviceId",required=true) String serviceId){
        try{
            logger.info("传入i的服务id为："+ serviceId);
            Map<String,Object> map = new HashMap<>(10);
            map.put("id",serviceId);
            map  = serviceService.serviceDetail(map);
            map.remove("id");
            JsonModel json = new JsonModel(true, ReturnCode.SUCESS_CODE_0000.getValue(), ReturnCode.SUCESS_CODE_0000.getKey(), map);
            return json;
        }catch (Exception e){
            logger.error(e.getMessage(),e);
            JsonModel json = new JsonModel(false,ReturnCode.ERROR_CODE_11001.getValue(),ReturnCode.ERROR_CODE_11001.getKey(),null);
            return json;
        }
    }

    /**
     * 功能描述:
     * 生成服务信息导入模板下载
     * @param:
     * @return:
     * @auther: guyuefei
     * @date:
     */
    @CrossOrigin
    @RequestMapping(method = {RequestMethod.OPTIONS,RequestMethod.POST,RequestMethod.GET},
            value = "/service/download/templet")
    @ResponseBody
    public Object downloadServiceTemplet(HttpServletRequest request, HttpServletResponse response){

        String fileName ="接入服务信息录入模板" + Calendar.getInstance().getTimeInMillis();
        OutputStream os = null;
        try {
            List<String> cells = new ArrayList<>();
            cells.add("所属分类大类");
            cells.add("所属分类小类");
            cells.add("服务名称");
            cells.add("服务描述");
            cells.add("调用路径");
            cells.add("输入参数");
            cells.add("所属学校");
            cells.add("所有者");
            cells.add("属性");
            cells.add("服务类型");
            cells.add("开发方式");
            cells.add("项目类型");
            cells.add("访问地址");
            cells.add("联系人");
            cells.add("联系人电话");
            cells.add("泰岳对接人");
            XSSFWorkbook workbook = (XSSFWorkbook)ExcelUtil.ExcelTemplet(cells);
            response.reset();
            response.setContentType("application/vnd.ms-excel;charset=utf-8");
            response.setHeader("Content-Disposition", "attachment;filename="+ new String((fileName + ".xlsx").getBytes(), "iso-8859-1"));
            os= new BufferedOutputStream(response.getOutputStream());
            workbook.write(os);

            os.flush();
            os.close();
        } catch (Exception e) {
            e.printStackTrace();
            return e.getMessage();
        }finally{
            try {
                if(null != os){
                    os.close();
                }
            } catch (IOException e2) {
                logger.error(e2.getMessage());
            }

        }
        JsonModel json = new JsonModel(true, ReturnCode.SUCESS_CODE_0000.getValue(), ReturnCode.SUCESS_CODE_0000.getKey(), fileName);
        return json;
    }

}
