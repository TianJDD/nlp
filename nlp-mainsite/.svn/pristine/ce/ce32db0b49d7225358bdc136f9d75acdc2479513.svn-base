package com.ultra.nlp.mainsite.RestController;

import com.alibaba.fastjson.JSONObject;
import com.ultra.nlp.mainsite.model.JsonModel;
import com.ultra.nlp.mainsite.model.ReturnCode;
import com.ultra.nlp.mainsite.service.IServiceService;
import org.java_websocket.WebSocket;
import org.java_websocket.client.WebSocketClient;
import org.java_websocket.drafts.Draft_6455;
import org.java_websocket.handshake.ServerHandshake;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.ByteBuffer;
import java.nio.channels.NotYetConnectedException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * 调用接入服务的接口
 */
@Controller
@RequestMapping(value = "/execute")
public class ExecuteServiceContrioller {
    private final static Logger logger = LoggerFactory.getLogger(ExecuteServiceContrioller.class);

    private static String  message;
    private static JsonModel json;
   @Autowired
    RestTemplate restTemplate;

   @Autowired
   IServiceService serviceService;

    /**
     * 执行调用服务接口
     * @param request
     * @param response
     * @param type 服务所属类别
     * @param url 服务调用路径
     * @param param 调用服务所需参数
     * @return
     */
    @RequestMapping(method = {RequestMethod.OPTIONS,RequestMethod.POST,RequestMethod.GET},
            value = "/service")
    @ResponseBody
    @Transactional
    public Object ExecuteService(HttpServletRequest request, HttpServletResponse response,
                @RequestParam(value = "username",required=false) String username,
                @RequestParam(value = "userId",required=false) String userId,
                @RequestParam(value = "serviceId",required=false) String serviceId,
                @RequestParam(value = "type",required=false) String type,
                @RequestParam(value = "url",required=false) String url,
                @RequestParam(value = "param",required=false) String param
        ){
        response.setHeader("Access-Control-Allow-Origin", "*");
        try{
            if(type.equals("001001")){//调用Rest服务
                return this.RestService(username,userId,serviceId,type,url,param);
            }
            if(type.equals("001002")){//调用websocket服务
                WebSocketClient  client = (WebSocketClient)this.websocket(url,param);
                 //因为websocket是全双工通信方式，所以需要等待返回结果返回
                 while(true){
                     if(message != null && !client.isClosed()){
                         client.close();
                         if(!client.isClosed()){
                            logger.info("链接未关闭");
                         }
                         break;
                     }
                 }
                logger.info("message 是：" + message);
                //message = message.replaceAll("[^0-9a-zA-Z]","");
                Map map = new HashMap(1);
                map.put("returnData",message);
                 JsonModel json = new JsonModel(true,ReturnCode.SUCESS_CODE_0000.getValue(),ReturnCode.SUCESS_CODE_0000.getKey(),map);
                return json;
            }

            return null;
        }catch(Exception e){
            logger.error(e.getMessage(),e);
            JsonModel json = new JsonModel(true,ReturnCode.ERROR_CODE_11001.getValue(),ReturnCode.ERROR_CODE_11001.getKey(),null);
            return json;
        }
    }

    /**
     * 调用Rest类型的服务
     * @param username
     * @param userId
     * @param serviceId
     * @param type
     * @param url
     * @param param
     * @return
     */
    public JsonModel RestService(String username,String userId ,String serviceId,String type,String url,String param){
        Map map = new HashMap(1);
        /*map.put("dictCode",type);
        map = serviceService.getServiceIpAndPort(map);*/
        //添加post请求头，如果不加会报415错误
        HttpHeaders headers = new HttpHeaders();
        MediaType mediaType = MediaType.parseMediaType("application/json; charset=UTF-8");
        headers.setContentType(mediaType);
        headers.add("Accept", MediaType.APPLICATION_JSON.toString());
        HttpEntity<String> formEntity = new HttpEntity<String>(param, headers);

        //调用本地代码进行测试
        //String URL = "http://10.10.24.79:9101/nlpapi" + url;
        try{
            String res = this.restTemplate.postForEntity(url , formEntity, String.class).getBody();
            logger.info("调用服务url为：" + url + ",传入参数为：" + param + "。接收到的参数为：" + res);
            //将返回参数改为json格式
            JSONObject returnJson = JSONObject.parseObject(res);
            //更新用户使用服务表中的使用次数
            map.clear();
            map.put("userName",username);
            map.put("userId",userId);
            map.put("fromType",type);
            map.put("serviceId",serviceId);
            map.put("dateTime",new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
            if(!(boolean)returnJson.get("notSuccess") && (boolean)returnJson.get("success")){

                map.put("type",1);//更新成功的使用次数
                int n = serviceService.updateServiceUseCount(map);
                map.clear();
                map.put("status",returnJson.get("status"));
                map.put("context",returnJson.get("context"));
                map.put("returnData",returnJson.get("data"));
                JsonModel json = new JsonModel(true,ReturnCode.SUCESS_CODE_0000.getValue(),ReturnCode.SUCESS_CODE_0000.getKey(),map);
                return json;
            }else{
                map.put("type",2);//更新失败的使用次数
                int n = serviceService.updateServiceUseCount(map);
                map.clear();
                map.put("status",returnJson.get("status"));
                map.put("context",returnJson.get("context"));
                map.put("err",returnJson.get("err"));
                map.put("returnData","");
                JsonModel json = new JsonModel(true,ReturnCode.SUCESS_CODE_0000.getValue(),ReturnCode.SUCESS_CODE_0000.getKey(),map);
                return json;
            }
        }catch(Exception e){
            logger.info(e.getLocalizedMessage(),e);
            map.clear();
            map.put("status","error");
            map.put("returnData","服务暂时不可用，请联系我们......");
            JsonModel json = new JsonModel(true,ReturnCode.SUCESS_CODE_0000.getValue(),ReturnCode.SUCESS_CODE_0000.getKey(),map);
            return json;
        }
    }
    /**
     * 连接websocket接口
     * 苏州大学 接入服务
     * @return
     */
    @Transactional
    public Object websocket(String url,String param ) throws URISyntaxException, NotYetConnectedException, IOException {
         String message = "";
         WebSocketClient  client = new WebSocketClient(new URI(url),new Draft_6455(),null,100) {

            @Override
            public void onOpen(ServerHandshake arg0) {
                System.out.println("链接已打开");
            }

            @Override
            public void onMessage(String arg0) {
                logger.info("收到消息"+arg0);
                ExecuteServiceContrioller.setMessage(arg0);
            }

            @Override
            public void onError(Exception arg0) {
                arg0.printStackTrace();
                logger.info("发生错误已关闭");
            }

            @Override
            public void onClose(int arg0, String arg1, boolean arg2) {
                logger.info("链接已关闭");
            }

            @Override
            public void onMessage(ByteBuffer bytes) {
                try {
                    System.out.println(new String(bytes.array(),"utf-8"));
                } catch (UnsupportedEncodingException e) {
                    e.printStackTrace();
                }
            }
        };

        client.connect();
        while(!client.getReadyState().equals(WebSocket.READYSTATE.OPEN)){
            logger.info("尝试打开连接");
        }
        client.send(param);

        JsonModel json = new JsonModel(true,ReturnCode.SUCESS_CODE_0000.getValue(),ReturnCode.SUCESS_CODE_0000.getKey(),message);
        return client;

    }

    public static synchronized void setMessage(String object){
        message = object;
    }

}
